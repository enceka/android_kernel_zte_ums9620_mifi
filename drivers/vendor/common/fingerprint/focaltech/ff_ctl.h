/**
 * User space driver API for FocalTech's fingerprint device.
 * ATTENTION: Do NOT edit this file unless the corresponding driver changed.
 *
 * Copyright (C) 2016-2017 FocalTech Systems Co., Ltd. All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 * Public License for more details.
**/

#ifndef __FF_CTRL_API_H__
#define __FF_CTRL_API_H__

#include <linux/ioctl.h>
#include <linux/platform_device.h>
/* Note: 1-Qualcomm 0-MTK */
#define ANDROID_WAKELOCK            1

/* Device node. */
#define FF_CTL_DEV_NAME "/dev/focaltech_fp"
#define FF_COMPATIBLE_NODE "focaltech,fingerprint"
/*
 * Define the driver version string.
 */
#define FF_DRV_VERSION "v2.1.3"

/*
 * Define the driver name.
 */
#define FF_DRV_NAME "focaltech_fp"

/* Max driver version buffer length. */
#define FF_DRV_VERSION_LEN 64
#define FF_DRV_IC_INFORMATION_LEN 64

#ifdef CONFIG_VENDOR_SOC_SPRD_COMPILE
#define  USE_PLATFORM_BUS	1
#endif

#ifdef CONFIG_VENDOR_SOC_MTK_COMPILE
#include <linux/spi/spidev.h>
#include <linux/spi/spi.h>
#define  USE_SPI_BUS   1
extern void mt_spi_enable_master_clk(struct spi_device *spidev);
extern void mt_spi_disable_master_clk(struct spi_device *spidev);
#endif

typedef struct {
    unsigned int code;
    int value;
} ff_key_event_t;

struct ff_driver_config_t {
    /* Using asynchronous notification mechanism instead of NETLINK. */
    bool enable_fasync;

#ifdef FF_FP_REGISTER_INPUT_DEV
    /* Gesture(Key emulation & Navigation) key codes. */
    int32_t keycode_nav_left;
    int32_t keycode_nav_right;
    int32_t keycode_nav_up;
    int32_t keycode_nav_down;
    int32_t keycode_double_click;
    int32_t keycode_click;
    int32_t keycode_long_press;
    int32_t keycode_simulation;
#endif

    /* For '/dev/spidevB.C' of REE-Emulation. */
    bool enable_spidev;
    int32_t spidev_bus;
    int32_t spidev_c_s;

    /* For obsolete driver that doesn't support device tree. */
    int32_t gpio_mosi_pin;
    int32_t gpio_miso_pin;
    int32_t gpio_ck_pin;
    int32_t gpio_cs_pin;
    int32_t gpio_rst_pin;
    int32_t gpio_int_pin;
    int32_t irq_num;
    int32_t gpio_pwr_pin;
    int32_t gpio_iovcc_pin;

    /* Logging driver to logcat through uevent mechanism. */
    int32_t log_level;
    bool logcat_driver;

#if defined(USE_PLATFORM_BUS)
    struct platform_device *platform_dev;
#elif defined(USE_SPI_BUS)
    struct spi_device *spi_dev;
#endif
    /*zte_fp_nav device*/
    struct platform_device *nav_dev;

    /* 0 gpio , 1 ldo */
    int power_type;
    /* get the voltage from dts file */
    int power_voltage;
    struct regulator *fp_reg;
};

/*zte_fp_nav*/
#define FF_FP_NAV_UP	   "fp_nav_event_up=true"
#define FF_FP_NAV_DOWN	   "fp_nav_event_down=true"
#define FF_FP_NAV_LEFT	   "fp_nav_event_left=true"
#define FF_FP_NAV_RIGHT	   "fp_nav_event_right=true"

enum kevent_value {
    KEYEVENT_RIGHT = 231,
    KEYEVENT_LEFT = 232,
    KEYEVENT_DOWN = 233,
    KEYEVENT_UP = 234,
};

typedef struct {
    char ic_name[FF_DRV_IC_INFORMATION_LEN];
    char ca_version[FF_DRV_IC_INFORMATION_LEN];
    char ta_version[FF_DRV_IC_INFORMATION_LEN];
} ic_information_t;

typedef struct {
    short bus;
    unsigned char cs;
} ff_spidev_info_t;

/* Magic code for IOCTL-subsystem, 'f'(0x66) means '[F]ocalTech'. */
#define FF_IOC_MAGIC 'f'

/* Allocate/Release driver resource (GPIO/SPI etc.). */
#define FF_IOC_INIT_DRIVER      _IO(FF_IOC_MAGIC, 0x00)
#define FF_IOC_FREE_DRIVER      _IO(FF_IOC_MAGIC, 0x01)

/* HW reset the fingerprint module. */
#define FF_IOC_RESET_DEVICE     _IO(FF_IOC_MAGIC, 0x02)

/* Low-level IRQ control. */
#define FF_IOC_ENABLE_IRQ       _IO(FF_IOC_MAGIC, 0x03)
#define FF_IOC_DISABLE_IRQ      _IO(FF_IOC_MAGIC, 0x04)

/* SPI bus clock control, for power-saving purpose. */
#define FF_IOC_ENABLE_SPI_CLK   _IO(FF_IOC_MAGIC, 0x05)
#define FF_IOC_DISABLE_SPI_CLK  _IO(FF_IOC_MAGIC, 0x06)

/* Fingerprint module power control. */
#define FF_IOC_ENABLE_POWER     _IO(FF_IOC_MAGIC, 0x07)
#define FF_IOC_DISABLE_POWER    _IO(FF_IOC_MAGIC, 0x08)

/* Androind system-wide key event, for navigation purpose. */
#define FF_IOC_REPORT_KEY_EVENT _IOW(FF_IOC_MAGIC, 0x09, ff_key_event_t)

/* Sync 'ff_driver_config_t', the driver configuration. */
#define FF_IOC_SYNC_CONFIG     _IOWR(FF_IOC_MAGIC, 0x0a, struct ff_driver_config_t)

/* Query the driver version string. */
#define FF_IOC_GET_VERSION      _IOR(FF_IOC_MAGIC, 0x0b, const char)

#define FF_IOC_SET_IC_INFORMATION _IOW(FF_IOC_MAGIC, 0x0c, ic_information_t)
#define FF_IOC_GET_IC_INFORMATION _IOR(FF_IOC_MAGIC, 0x0d, ic_information_t)

#define FF_IOC_GET_SPIDEV_INFO  _IOR(FF_IOC_MAGIC, 0x0e, ff_spidev_info_t)

/* See ff_hw.c for platform dependent implementation. */
int ff_ctl_init_pins(void);
int ff_ctl_free_pins(void);
int ff_ctl_enable_spiclk(bool on);
int ff_ctl_enable_power(bool on);
int ff_ctl_reset_device(void);
const char *ff_ctl_arch_str(void);

#endif /* __FF_CTRL_API_H__ */
